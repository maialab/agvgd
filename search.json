[{"path":"https://maialab.org/agvgd/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Ramiro Magno Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://maialab.org/agvgd/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ramiro Magno. Author, maintainer. Isabel Duarte. Author. Ana-Teresa Maia. Author. . Copyright holder, funder.","code":""},{"path":"https://maialab.org/agvgd/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Magno R, Duarte , Maia (2022). agvgd: R Implementation 'Align-GVGD' Method. https://maialab.org/agvgd/, https://github.com/maialab/agvgd.","code":"@Manual{,   title = {agvgd: An R Implementation of the 'Align-GVGD' Method},   author = {Ramiro Magno and Isabel Duarte and Ana-Teresa Maia},   year = {2022},   note = {https://maialab.org/agvgd/, https://github.com/maialab/agvgd}, }"},{"path":"https://maialab.org/agvgd/index.html","id":"agvgd-","dir":"","previous_headings":"","what":"An R Implementation of the Align-GVGD Method","title":"An R Implementation of the Align-GVGD Method","text":"R package agvgd provides R implementation Align-GVGD1,2,3 (-GVGD) method. -GVGD combines multiple sequence alignment orthologous sequences Grantham distance4 classify missense variants, .e. distinguish human disease susceptibility missense changes changes little clinical significance.","code":""},{"path":"https://maialab.org/agvgd/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R Implementation of the Align-GVGD Method","text":"Install agvgd CRAN: can install development version agvgd like :","code":"install.packages(\"agvgd\") # install.packages(\"remotes\") remotes::install_github(\"maialab/agvgd\")"},{"path":"https://maialab.org/agvgd/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"An R Implementation of the Align-GVGD Method","text":"minimal example using dummy alignment constructed R matrix: another simple example using one bundled alignments. one alignment gene ATM. Let’s say interested position 16 alignment, like know impact possible missense substitutions:","code":"library(agvgd)  # The alignment can be provided as a simple matrix: alignment <- matrix(   c('P', 'M', 'I',     'P', 'I', 'I',     'P', 'L', 'I'),   nrow = 3,   byrow = TRUE )  # In this example we will interrogate changes to the second position in the # alignment, i.e., changes to Methionine (M); therefore we set the position of # interest (poi) to 2. poi <- 2  # Here's a set of three possible missense changes (substitutions): Isoleucine # (Ile, I), Leucine (Leu, L), and Tryptophan (Trp, W): substitutions <- c('I', 'L', 'W')  # agvgd package's main function is `agvgd()` :) agvgd(alignment = alignment, poi = poi, substitutions) #> # A tibble: 3 × 7 #>     res   poi ref   sub      gv    gd prediction #>   <int> <int> <chr> <chr> <dbl> <dbl> <chr>      #> 1     2     2 M     I      14.3   0   C0         #> 2     2     2 M     L      14.3   0   C0         #> 3     2     2 M     W      14.3  60.4 C35 # `read_alignment()` either reads in one of the bundled alignments with # `{agvgd}` by gene name or directly from a FASTA file. alignment <- read_alignment(gene = 'ATM')  # For the sake of illustration, let us define a new alignment based on a narrow # region of the original alignment by focusing only on the first 30 positions. # Note: rows are protein sequences; columns are alignment positions. narrow_alignment <- alignment[, 1:30]  # poi: position of interest poi <- 16  # Print the alignment to the console and highlight the position of interest # (POI). NB: The POI is not highlighted in GitHub's README but it is on the R # console. print(narrow_alignment, poi = poi) #> Hsap_ATM_AAB65827.1  1 M-SLVLNDLLICCRQLEHDRATERKKEVEK #> Mmus_ATM_NP_031525.2 1 M-SLALNDLLICCRQLEHDRATERRKEVDK #> Sscr_ATM_AAT01608.1  1 M-SLALNDLLICCRQLEHDRATERRKAVEN #> Mdom_ATM_IARC        1 M-SLALNDLLLCCRQLENDRATERRKEVEK #> Ggal_ATM_edited      1 M-SLVLHDLLTCCRRLENERATERRNEIEN #> Xlae_ATM_AAT72929.1  1 M-SLALHELLLCCRQIETDKATERKKEIVK #> Drer_ATM_IARC_v2     1 M-SLALHELLVCCRGLENEKATERKKEVDR #> Bflo_ATM_IARC        1 MTDLLTHDLRDCCCHLESDKVTERKKNAEK #> Spur_ATM_ABY60856.1  1 MAEVLIP-LRTACGYLGSDKITERKKQIDI  # You may use `amino_acids()` to get a vector of all the 20 standard amino acids # and hence easily get a vector of all possible substitutions: all_substitutions <- amino_acids()  agvgd(alignment = narrow_alignment, poi = poi, all_substitutions) #> # A tibble: 20 × 7 #>      res   poi ref   sub      gv    gd prediction #>    <int> <int> <chr> <chr> <dbl> <dbl> <chr>      #>  1    15    16 L     S      4.86 142.  C65        #>  2    15    16 L     R      4.86  97.6 C65        #>  3    15    16 L     L      4.86   0   C0         #>  4    15    16 L     P      4.86  95.4 C65        #>  5    15    16 L     T      4.86  89.3 C65        #>  6    15    16 L     A      4.86  93.7 C65        #>  7    15    16 L     V      4.86  29.6 C15        #>  8    15    16 L     G      4.86 135.  C65        #>  9    15    16 L     I      4.86   0   C0         #> 10    15    16 L     F      4.86  21.3 C0         #> 11    15    16 L     Y      4.86  33.0 C25        #> 12    15    16 L     C      4.86 197.  C65        #> 13    15    16 L     H      4.86  94.3 C65        #> 14    15    16 L     Q      4.86 109.  C65        #> 15    15    16 L     N      4.86 149.  C65        #> 16    15    16 L     K      4.86 102.  C65        #> 17    15    16 L     D      4.86 168.  C65        #> 18    15    16 L     E      4.86 134.  C65        #> 19    15    16 L     M      4.86  10.1 C0         #> 20    15    16 L     W      4.86  60.5 C55"},{"path":"https://maialab.org/agvgd/index.html","id":"logo","dir":"","previous_headings":"","what":"Logo","title":"An R Implementation of the Align-GVGD Method","text":"agvgd logo, agvgd.png, derivative work illustration “Globin Evolution” David S. Goodsell RCSB PDB, used CC--4.0. agvgd.png licensed CC--4.0 Ramiro Magno.","code":""},{"path":"https://maialab.org/agvgd/index.html","id":"related-software","dir":"","previous_headings":"","what":"Related software","title":"An R Implementation of the Align-GVGD Method","text":"Align-GVGD (-GVGD) Sean Tavtigian, provided web service hosted Huntsman Cancer Institute http://agvgd.hci.utah.edu/. Multivariate Analysis Protein Polymorphism (MAPP)5 Eric Stone ideas -GVGD sophisticated framework. used provided Java standalone application: https://biology.anu.edu.au/research/groups/stone-group-quantitative--computational-biology/software; however, download link MAPP long . grantham package.","code":""},{"path":"https://maialab.org/agvgd/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"An R Implementation of the Align-GVGD Method","text":"work package benefited greatly feedback Professor Sean Tavtigian, Dr. Russell Bell.","code":""},{"path":"https://maialab.org/agvgd/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"An R Implementation of the Align-GVGD Method","text":"1. Tavtigian, S.V., Deffenbaugh, . M., Yin, L., Judkins, T., Scholl, T., Samollow, P.B., de Silva, D., Zharkikh, ., Thomas, . Comprehensive statistical study 452 BRCA1 missense substitutions classification eight recurrent substitutions neutral. Journal Medical Genetics 43, 295–305 (2006). doi: 10.1136/jmg.2005.033878. 2. Mathe, E., Olivier, M., Kato, S., Ishioka, C., Hainaut, P., Tavtigian, S.V. Computational approaches predicting biological effect p53 missense mutations: comparison three sequence analysis based methods. Nucleic Acids Research 34, 1317–1325 (2006). doi: 10.1093/nar/gkj518. 3. Tavtigian, S.V., Byrnes, G. B, Goldgar, D. E., Thomas, . Classification rare missense substitutions, using risk surfaces, genetic- molecular-epidemiology applications. Human Mutation 29, 1342–1354. doi: 10.1002/humu.20896 3. Grantham, R. Amino acid difference formula help explain protein evolution. Science 185, 862–864 (1974). doi: 10.1126/science.185.4154.862. 4. Stone, E. ., Sidow, Arend. Physicochemical constraint violation missense substitutions mediates impairment protein function disease severity. Genome Research 15, 978–986 (2005). doi: 10.1101/gr.3804205.","code":""},{"path":"https://maialab.org/agvgd/reference/agvgd-package.html","id":null,"dir":"Reference","previous_headings":"","what":"agvgd: An R Implementation of the 'Align-GVGD' Method — agvgd-package","title":"agvgd: An R Implementation of the 'Align-GVGD' Method — agvgd-package","text":"'Align-GVGD' ('-GVGD') method predict impact 'missense' substitutions based properties amino acid side chains protein multiple sequence alignments <doi:10.1136/jmg.2005.033878>. '-GVGD' extension original 'Grantham' distance multiple sequence alignments. package provides alternative R implementation web version found <http://agvgd.hci.utah.edu/>.","code":""},{"path":[]},{"path":"https://maialab.org/agvgd/reference/agvgd-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"agvgd: An R Implementation of the 'Align-GVGD' Method — agvgd-package","text":"Maintainer: Ramiro Magno ramiro.magno@gmail.com (ORCID) Authors: Isabel Duarte iduarte.scientist@gmail.com (ORCID) Ana-Teresa Maia maia.anateresa@gmail.com (ORCID) contributors: CINTESIS [copyright holder, funder]","code":""},{"path":"https://maialab.org/agvgd/reference/agvgd.html","id":null,"dir":"Reference","previous_headings":"","what":"Align-GVGD (A-GVGD) — agvgd","title":"Align-GVGD (A-GVGD) — agvgd","text":"function implements Align-GVGD (-GVGD) method described Tavtigian et al. (2006). -GVGD combines multiple sequence alignment orthologous sequences Grantham distance classify missense variants, .e. distinguish human disease susceptibility missense changes changes little clinical significance. biochemical variation alignment position converted Grantham Variation score (GV) difference properties variant amino acid assessed calculated Grantham Difference score generated (GD).  predicted effect classed C0, C15, C25, C35, C45, C55, C65, C65 likely interfere function C0 least likely.","code":""},{"path":"https://maialab.org/agvgd/reference/agvgd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align-GVGD (A-GVGD) — agvgd","text":"","code":"agvgd(alignment, poi, sub, mode = c(\"recycle\", \"expand_grid\"), sort = FALSE)"},{"path":"https://maialab.org/agvgd/reference/agvgd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align-GVGD (A-GVGD) — agvgd","text":"alignment character matrix alignment object obtained read_alignment(). Rows expected sequences single characters (protein residues), columns alignment positions. first row must reference sequence, .e. sequence whose substitutions evaluated . poi whole number indicating position interest (POI). sub character vector protein residue substitutions classified. amino acids must provided one-letter symbols. mode poi sub contain one element, mode specifies two inputs combined. mode = 'recycle' shortest vector recycled match length longest. mode = 'expand_grid', combinations elements poi sub combined. sort Whether sort output gd, . Default FALSE.","code":""},{"path":"https://maialab.org/agvgd/reference/agvgd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align-GVGD (A-GVGD) — agvgd","text":"tibble whose observations refer combination alignment position amino acid substitution; consists seven variables: res Position amino acid residue reference protein (first sequence alignment). position corresponds poi minus gaps alignment. poi Position interest, .e. alignment position amino acid substitution assessed. ref Reference amino acid, .e. amino acid first sequence alignment, position interest. sub Amino acid substitution assessed. gv Grantham variation score. gd Grantham difference score. prediction Predicted effect amino acid substitution. classed C0, C15, C25, C35, C45, C55, C65, C65 likely interfere function C0 least likely.","code":""},{"path":"https://maialab.org/agvgd/reference/agvgd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Align-GVGD (A-GVGD) — agvgd","text":"Tavtigian, S.V., Deffenbaugh, . M., Yin, L., Judkins, T., Scholl, T., Samollow, P.B., de Silva, D., Zharkikh, ., Thomas, . Comprehensive statistical study 452 BRCA1 missense substitutions classification eight recurrent substitutions neutral. Journal Medical Genetics 43, 295--305 (2006). doi: 10.1136/jmg.2005.033878 . Mathe, E., Olivier, M., Kato, S., Ishioka, C., Hainaut, P., Tavtigian, S.V. Computational approaches predicting biological effect p53 missense mutations: comparison three sequence analysis based methods. Nucleic Acids Research 34, 1317--1325 (2006). doi: 10.1093/nar/gkj518 .","code":""},{"path":"https://maialab.org/agvgd/reference/agvgd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align-GVGD (A-GVGD) — agvgd","text":"","code":"# Read an alignment into R, e.g. the alignment for gene ATM. alignment_ATM <- read_alignment(gene = 'ATM')  # Predict the impact of changing the first residue (Met) to a Serine (S). agvgd(alignment = alignment_ATM, poi = 1, sub = 'S') #> # A tibble: 1 × 7 #>     res   poi ref   sub      gv    gd prediction #>   <int> <int> <chr> <chr> <dbl> <dbl> <chr>      #> 1     1     1 M     S         0  135. C65         # `poi` can be a vector of positions, e.g., 3 thru 10, allow for prediction # of multiple positions at once. agvgd(alignment = alignment_ATM, poi = 3:10, sub = 'S') #> # A tibble: 8 × 7 #>     res   poi ref   sub      gv     gd prediction #>   <int> <int> <chr> <chr> <dbl>  <dbl> <chr>      #> 1     2     3 S     S      87.4   0    C0         #> 2     3     4 L     S      31.8 123.   C35        #> 3     4     5 V     S      96.2  99.1  C15        #> 4     5     6 L     S      92.4  57.7  C0         #> 5     6     7 N     S     108.    6.20 C0         #> 6     7     8 D     S     223.   50.2  C0         #> 7     8     9 L     S       0   144.   C65        #> 8     9    10 L     S     102.   95.9  C15         # `poi` expects a position in the frame of reference of the alignment, i.e. # an alignment position (a column index). However, if you know instead # the residue position in the reference sequence (first sequence in the # alignment), then you may use the function `residue_pos_to_alignment_pos()` # to convert from residue position to alignment position. # # Example: The second residue in the reference sequence of the ATM alignment # is a Serine, after a Methionine. In the alignment, there is a gap between # the two residues, so the alignment is 3 but the residue position on the # protein is 2. (poi2 <- res_to_poi(alignment_ATM, 2)) #> [1] 3 agvgd(alignment = alignment_ATM, poi = poi2, sub = 'A') #> # A tibble: 1 × 7 #>     res   poi ref   sub      gv    gd prediction #>   <int> <int> <chr> <chr> <dbl> <dbl> <chr>      #> 1     2     3 S     A      87.4  65.6 C0          # Because changes are context-dependent, i.e. they depend on the residue # variation observed at a given alignment position, the same reference # residue when replaced with the same substitution will in general have # a different predicted impact. agvgd(alignment = alignment_ATM, poi = 9:10, sub = 'S') #> # A tibble: 2 × 7 #>     res   poi ref   sub      gv    gd prediction #>   <int> <int> <chr> <chr> <dbl> <dbl> <chr>      #> 1     8     9 L     S        0  144.  C65        #> 2     9    10 L     S      102.  95.9 C15         # Use the ancillary function `amino_acids()` to get a vector of one-letter # residue substitutions if you want to quickly assess the impact of all # possible substitutions. agvgd(alignment = alignment_ATM, poi = 1, sub = amino_acids()) #> # A tibble: 20 × 7 #>      res   poi ref   sub      gv    gd prediction #>    <int> <int> <chr> <chr> <dbl> <dbl> <chr>      #>  1     1     1 M     S         0 135.  C65        #>  2     1     1 M     R         0  91.6 C65        #>  3     1     1 M     L         0  14.3 C0         #>  4     1     1 M     P         0  86.6 C65        #>  5     1     1 M     T         0  81.0 C65        #>  6     1     1 M     A         0  84.4 C65        #>  7     1     1 M     V         0  21.5 C15        #>  8     1     1 M     G         0 127.  C65        #>  9     1     1 M     I         0  10.1 C0         #> 10     1     1 M     F         0  28.5 C25        #> 11     1     1 M     Y         0  35.2 C35        #> 12     1     1 M     C         0 196.  C65        #> 13     1     1 M     H         0  86.3 C65        #> 14     1     1 M     Q         0 101.  C65        #> 15     1     1 M     N         0 141.  C65        #> 16     1     1 M     K         0  94.5 C65        #> 17     1     1 M     D         0 160.  C65        #> 18     1     1 M     E         0 126.  C65        #> 19     1     1 M     M         0   0   C0         #> 20     1     1 M     W         0  66.6 C65         # Parameter `mode` gives you flexibility on how to combine `poi` and `sub`. agvgd(alignment = alignment_ATM, poi = 3:4, sub = c('A', 'V')) #> # A tibble: 2 × 7 #>     res   poi ref   sub      gv    gd prediction #>   <int> <int> <chr> <chr> <dbl> <dbl> <chr>      #> 1     2     3 S     A      87.4  65.6 C0         #> 2     3     4 L     V      31.8   0   C0          # Use 'expand_grid' for all combinations. agvgd(alignment = alignment_ATM, poi = 3:4, sub = c('A', 'V'), mode = 'expand_grid') #> # A tibble: 4 × 7 #>     res   poi ref   sub      gv    gd prediction #>   <int> <int> <chr> <chr> <dbl> <dbl> <chr>      #> 1     2     3 S     A      87.4  65.6 C0         #> 2     2     3 S     V      87.4  82.7 C15        #> 3     3     4 L     A      31.8  64.4 C25        #> 4     3     4 L     V      31.8   0   C0"},{"path":"https://maialab.org/agvgd/reference/alignment_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-bundled alignments — alignment_file","title":"Pre-bundled alignments — alignment_file","text":"function returns either data frame pre-bundled alignments parameter gene missing (default behaviour), file name alignment supplied gene name.","code":""},{"path":"https://maialab.org/agvgd/reference/alignment_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-bundled alignments — alignment_file","text":"","code":"alignment_file(gene)"},{"path":"https://maialab.org/agvgd/reference/alignment_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pre-bundled alignments — alignment_file","text":"gene gene name one pre-bundled alignments. Run alignment_file() list genes available.","code":""},{"path":"https://maialab.org/agvgd/reference/alignment_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pre-bundled alignments — alignment_file","text":"Either data frame pre-bundled alignments parameter geneis missing (default behaviour), file name alignment supplied gene name.","code":""},{"path":"https://maialab.org/agvgd/reference/alignment_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre-bundled alignments — alignment_file","text":"","code":"# List pre-bundled alignment file names and associated genes alignment_file() #> # A tibble: 12 × 2 #>    gene   file                       #>    <chr>  <chr>                      #>  1 ATM    ATM4_Spur.fasta            #>  2 BRCA1  BRCA1_Align_Pufferfish.txt #>  3 BRCA2  BRCA2_Puff.fasta           #>  4 CHECK2 CHEK2_June_2010.fasta      #>  5 MRE11  MRE11_all.fa               #>  6 MSH6   MSH6_Align_2010a.fa        #>  7 NBN    NBN_all.fa                 #>  8 PALB2  PALB2.fa                   #>  9 PMS2   PMS2_Align_2010a.fa        #> 10 RAD50  RAD50_all.fa               #> 11 RAD51  RAD51.fa                   #> 12 XRCC2  XRCC2_Tadh.fa               # Retrieve the file name of an alignment alignment_file(\"BRCA1\") #> [1] \"BRCA1_Align_Pufferfish.txt\"  # You may get the full path to an alignment file with `system.file()` system.file(\"extdata\", alignment_file(\"BRCA1\"), package = \"agvgd\") #> [1] \"/home/runner/work/_temp/Library/agvgd/extdata/BRCA1_Align_Pufferfish.txt\""},{"path":"https://maialab.org/agvgd/reference/amino_acids.html","id":null,"dir":"Reference","previous_headings":"","what":"The 20 standard amino acids — amino_acids","title":"The 20 standard amino acids — amino_acids","text":"20 amino acids encoded directly codons universal genetic code.","code":""},{"path":"https://maialab.org/agvgd/reference/amino_acids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The 20 standard amino acids — amino_acids","text":"","code":"amino_acids(code = c(\"one_letter\", \"three_letter\"))"},{"path":"https://maialab.org/agvgd/reference/amino_acids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The 20 standard amino acids — amino_acids","text":"code type amino acid symbol returned, one-letter (`one_letter`) three-letter (`three_letter`) codes.","code":""},{"path":"https://maialab.org/agvgd/reference/amino_acids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The 20 standard amino acids — amino_acids","text":"character vector 20 standard amino acids.","code":""},{"path":"https://maialab.org/agvgd/reference/amino_acids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The 20 standard amino acids — amino_acids","text":"","code":"# By default `amino_acids` returns one-letter symbols amino_acids() #>  [1] \"S\" \"R\" \"L\" \"P\" \"T\" \"A\" \"V\" \"G\" \"I\" \"F\" \"Y\" \"C\" \"H\" \"Q\" \"N\" \"K\" \"D\" \"E\" \"M\" #> [20] \"W\"  # Use code = 'three_letter' instead for three-letter symbols amino_acids(code = 'three_letter') #>  [1] \"Ser\" \"Arg\" \"Leu\" \"Pro\" \"Thr\" \"Ala\" \"Val\" \"Gly\" \"Ile\" \"Phe\" \"Tyr\" \"Cys\" #> [13] \"His\" \"Gln\" \"Asn\" \"Lys\" \"Asp\" \"Glu\" \"Met\" \"Trp\""},{"path":"https://maialab.org/agvgd/reference/cpv_ranges.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine CPV ranges — cpv_ranges","title":"Determine CPV ranges — cpv_ranges","text":"function determines range (minimum maximum) values three amino acid side chain property values --- composition, polarity molecular volume --- amino acids alignment position interest. alignment passed alignment must already focused alignment three columns whose second column position interest.","code":""},{"path":"https://maialab.org/agvgd/reference/cpv_ranges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine CPV ranges — cpv_ranges","text":"","code":"cpv_ranges(alignment, exclude = c(\"-\", \"X\", NA_character_))"},{"path":"https://maialab.org/agvgd/reference/cpv_ranges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine CPV ranges — cpv_ranges","text":"alignment character matrix alignment object obtained read_alignment(). Rows expected sequences single characters (protein residues), columns alignment positions. first row must reference sequence, .e. sequence whose substitutions evaluated . exclude vector character values ignored collecting amino acids position interest.","code":""},{"path":"https://maialab.org/agvgd/reference/cpv_ranges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine CPV ranges — cpv_ranges","text":"tibble one single row, six variables, .e., minimum maximum values composition (c_minand c_max), polarity (p_min p_max) molecular volume (v_minand v_max).","code":""},{"path":[]},{"path":"https://maialab.org/agvgd/reference/cpv_ranges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine CPV ranges — cpv_ranges","text":"","code":"# You need to first focus the alignment around the position of interest. The # position of interest is position 4 in the example below. After subsetting # the alignment, it becomes position 2. alignment <- read_alignment('ATM')  alignment[, 3:5] #> Hsap_ATM_AAB65827.1  1 SLV #> Mmus_ATM_NP_031525.2 1 SLA #> Sscr_ATM_AAT01608.1  1 SLA #> Mdom_ATM_IARC        1 SLA #> Ggal_ATM_edited      1 SLV #> Xlae_ATM_AAT72929.1  1 SLA #> Drer_ATM_IARC_v2     1 SLA #> Bflo_ATM_IARC        1 DLL #> Spur_ATM_ABY60856.1  1 EVL  cpv_ranges(alignment[, 3:5]) #> # A tibble: 1 × 6 #>   c_min c_max p_min p_max v_min v_max #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1     0     0   4.9   5.9    84   111  # If at the position of interest there are symbols other than amino acid # symbols, e.g. gaps (\"-\"), then these are ignored and the calculated ranges # are based only on the observed amino acids. alignment[, 270:272] #> Hsap_ATM_AAB65827.1  1 QHR #> Mmus_ATM_NP_031525.2 1 QHR #> Sscr_ATM_AAT01608.1  1 QHR #> Mdom_ATM_IARC        1 QQR #> Ggal_ATM_edited      1 QYR #> Xlae_ATM_AAT72929.1  1 MQR #> Drer_ATM_IARC_v2     1 GMR #> Bflo_ATM_IARC        1 N-R #> Spur_ATM_ABY60856.1  1 S-N  cpv_ranges(alignment[, 270:272]) #> # A tibble: 1 × 6 #>   c_min c_max p_min p_max v_min v_max #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1     0  0.89   5.7  10.5    85   136"},{"path":"https://maialab.org/agvgd/reference/dev.html","id":null,"dir":"Reference","previous_headings":"","what":"Deviation function — dev","title":"Deviation function — dev","text":"function calculates deviation sense Grantham deviation introduced Tavtigian et al. (2006). Essentially, x lies within range [min, max], dev() returns 0. x either min, max, dev() returns absolute difference x min max, respectively.  Inputs recycled sense vctrs::vec_recycle().","code":""},{"path":"https://maialab.org/agvgd/reference/dev.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deviation function — dev","text":"","code":"dev(x, min, max)"},{"path":"https://maialab.org/agvgd/reference/dev.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deviation function — dev","text":"x numeric vector. min numeric vector. max numeric vector.","code":""},{"path":"https://maialab.org/agvgd/reference/dev.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deviation function — dev","text":"numeric vector deviations.","code":""},{"path":"https://maialab.org/agvgd/reference/dev.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deviation function — dev","text":"plot showcasing dev() min = -4 max = 3:","code":"x <- -10:10; min <- -4; max <- 3 plot(x, y = dev(x, min, max), type = 'l', xlab = 'x', ylab = 'deviation')"},{"path":[]},{"path":"https://maialab.org/agvgd/reference/dev.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deviation function — dev","text":"","code":"# `dev()` returns absolute differences from either min or max (whichever is # closest). dev(10, min = -4, max = 4) #> [1] 6 dev(-10, min = -4, max = 4) #> [1] 6  # `x` can be a vector dev(-10:10, min = -4, max = 4) #>  [1] 6 5 4 3 2 1 0 0 0 0 0 0 0 0 0 1 2 3 4 5 6  # `min` and `max` can also be vectors, they will be recycled dev(-10:10, min = -4:16, max = 4:24) #>  [1] 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6  # If `x` contains `NA` values, then `dev()` will return `NA` for # those cases dev(c(10, NA), min = -4, max = 4) #> [1]  6 NA  # For each calculation of deviation, only either `min` or `max` is used. If # the unused parameter is `NA` it won't affect the calculation: dev(c(10, 3), min = c(NA, -4), max = 4) #> [1] 6 0 dev(c(10, -5), min = -4, max = c(4, NA)) #> [1] 6 1"},{"path":"https://maialab.org/agvgd/reference/gd.html","id":null,"dir":"Reference","previous_headings":"","what":"Grantham deviation — gd","title":"Grantham deviation — gd","text":"function calculates Grantham deviation (\\(\\mathrm{gd}\\)): $$\\mathrm{gd} = \\rho \\left((\\alpha\\ \\mathrm{dev}^2(c_x, c_{min}, c_{max}) + \\beta\\ \\mathrm{dev}^2(p_x, p_{min}, p_{max}) + \\gamma\\ \\mathrm{dev}^2(v_x, v_{min}, v_{max})\\right)^\\frac{1}{2}$$ \\(c_x\\) value composition \\(c\\) amino acid \\(x\\), .e. atomic weight ratio hetero (noncarbon) elements end groups rings carbons side chain; \\(p_x\\) value polarity \\(p\\) amino acid \\(x\\); , \\(v_x\\) value molecular volume \\(v\\) amino acid \\(x\\). \\(c_x\\), \\(p_x\\) \\(v_x\\) looked grantham::amino_acids_properties based amino acid identities passed x. function \\(\\mathrm{dev}\\) implemented dev(). Remaining variables equation arguments gd() hence explained Arguments section.","code":""},{"path":"https://maialab.org/agvgd/reference/gd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grantham deviation — gd","text":"","code":"gd(   x,   c_min,   c_max,   p_min,   p_max,   v_min,   v_max,   alpha = 1.833,   beta = 0.1018,   gamma = 0.000399,   rho = 50.723 )"},{"path":"https://maialab.org/agvgd/reference/gd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grantham deviation — gd","text":"x character vector one-letter amino acid codes, indicating missense substitutions. c_min Amino acid composition, minimum value. c_max Amino acid, composition, maximum value. p_min Amino acid polarity, minimum value. p_max Amino acid polarity, maximum value. v_min Amino acid molecular volume, maximum value. v_max Amino acid molecular volume, maximum value. alpha constant \\(\\alpha\\) Grantham's equation. square inverse mean composition property. beta constant \\(\\beta\\) Grantham's equation. square inverse mean polarity property. gamma constant \\(\\gamma\\) Grantham's equation. square inverse mean molecular volume property. rho Grantham's distances reported Table 2, Science (1974). 185(4154): 862--4 R. Grantham, scaled factor (named \\(\\rho\\)) mean value distances 100. rho parameter allows factor \\(\\rho\\) changed. default \\(\\rho=50.723\\), value used Grantham. value originally mentioned caption Table 2 aforementioned paper.","code":""},{"path":"https://maialab.org/agvgd/reference/gd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grantham deviation — gd","text":"numeric vector Grantham deviations. deviation corresponds one amino acids indicated x.","code":""},{"path":[]},{"path":"https://maialab.org/agvgd/reference/gd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grantham deviation — gd","text":"","code":"gd('S', c_min = 0.39, c_max = 0.74, p_min =4.9, p_max =8.6, v_min = 3, v_max = 32.5) #> [1] 47.69654"},{"path":"https://maialab.org/agvgd/reference/gv.html","id":null,"dir":"Reference","previous_headings":"","what":"Grantham variation — gv","title":"Grantham variation — gv","text":"function calculates Grantham variation (\\(\\mathrm{gv}\\)): $$\\mathrm{gv} = \\rho \\left((\\alpha (c_{max}-c_{min})^2 + \\beta (p_{max}-p_{min})^2 + \\gamma (v_{max}-v_{min})^2\\right)^\\frac{1}{2}$$ minimum maximum values observed set amino acid residues alignment position interest.","code":""},{"path":"https://maialab.org/agvgd/reference/gv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grantham variation — gv","text":"","code":"gv(   c_min,   c_max,   p_min,   p_max,   v_min,   v_max,   alpha = 1.833,   beta = 0.1018,   gamma = 0.000399,   rho = 50.723 )"},{"path":"https://maialab.org/agvgd/reference/gv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grantham variation — gv","text":"c_min Amino acid composition, minimum value. c_max Amino acid, composition, maximum value. p_min Amino acid polarity, minimum value. p_max Amino acid polarity, maximum value. v_min Amino acid molecular volume, maximum value. v_max Amino acid molecular volume, maximum value. alpha constant \\(\\alpha\\) Grantham's equation. square inverse mean composition property. beta constant \\(\\beta\\) Grantham's equation. square inverse mean polarity property. gamma constant \\(\\gamma\\) Grantham's equation. square inverse mean molecular volume property. rho Grantham's distances reported Table 2, Science (1974). 185(4154): 862--4 R. Grantham, scaled factor (named \\(\\rho\\)) mean value distances 100. rho parameter allows factor \\(\\rho\\) changed. default \\(\\rho=50.723\\), value used Grantham. value originally mentioned caption Table 2 aforementioned paper.","code":""},{"path":"https://maialab.org/agvgd/reference/gv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grantham variation — gv","text":"numeric vector grantham variation values.","code":""},{"path":[]},{"path":"https://maialab.org/agvgd/reference/gv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grantham variation — gv","text":"","code":"# Example based on values from Figure 1C of Tavtigian et al. (2006), # https://doi.org/10.1136/jmg.2005.033878. gv(c_min = 0, c_max = 0, p_min = 5.7, p_max = 4.9, v_min = 132, v_max = 105) #> [1] 30.26523"},{"path":"https://maialab.org/agvgd/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://maialab.org/agvgd/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://maialab.org/agvgd/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://maialab.org/agvgd/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://maialab.org/agvgd/reference/poi_to_res.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an alignment position to residue position — poi_to_res","title":"Convert an alignment position to residue position — poi_to_res","text":"function converts alignment position position frame reference protein sequence, .e., positions amino acids first sequence alignment.","code":""},{"path":"https://maialab.org/agvgd/reference/poi_to_res.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an alignment position to residue position — poi_to_res","text":"","code":"poi_to_res(alignment, poi)"},{"path":"https://maialab.org/agvgd/reference/poi_to_res.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an alignment position to residue position — poi_to_res","text":"alignment alignment. poi alignment position.","code":""},{"path":"https://maialab.org/agvgd/reference/poi_to_res.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an alignment position to residue position — poi_to_res","text":"integer vector positions amino acid residues   reference sequence.","code":""},{"path":"https://maialab.org/agvgd/reference/poi_to_res.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert an alignment position to residue position — poi_to_res","text":"","code":"align_ATM <- read_alignment('ATM') align_ATM[, 1:5] #> Hsap_ATM_AAB65827.1  1 M-SLV #> Mmus_ATM_NP_031525.2 1 M-SLA #> Sscr_ATM_AAT01608.1  1 M-SLA #> Mdom_ATM_IARC        1 M-SLA #> Ggal_ATM_edited      1 M-SLV #> Xlae_ATM_AAT72929.1  1 M-SLA #> Drer_ATM_IARC_v2     1 M-SLA #> Bflo_ATM_IARC        1 MTDLL #> Spur_ATM_ABY60856.1  1 MAEVL  # Convert the positions of the first five alignment positions to residue positions poi_to_res(align_ATM, 1:5) #> [1]  1 NA  2  3  4"},{"path":"https://maialab.org/agvgd/reference/read_alignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a protein sequence multiple alignment — read_alignment","title":"Read a protein sequence multiple alignment — read_alignment","text":"Reads protein sequence multiple alignment (PSMA) either set pre-bundled alignments, gene name, Multi-FASTA file.","code":""},{"path":"https://maialab.org/agvgd/reference/read_alignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a protein sequence multiple alignment — read_alignment","text":"","code":"read_alignment(   gene = c(\"ATM\", \"BRCA1\", \"BRCA2\", \"CHEK2\", \"MRE11\", \"MSH6\", \"NBN\", \"PALB2\", \"PMS2\",     \"RAD50\", \"RAD51\", \"XRCC2\"),   file = NULL )"},{"path":"https://maialab.org/agvgd/reference/read_alignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a protein sequence multiple alignment — read_alignment","text":"gene gene name alignment provided package. Use function alignment_file() list pre-bundled alignments. file path Multi-FASTA file. argument given, takes precedence gene parameter.","code":""},{"path":"https://maialab.org/agvgd/reference/read_alignment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a protein sequence multiple alignment — read_alignment","text":"alignment object; essentially, character matrix, whose elements protein residues one-letter notation. Rows sequences columns alignment positions.","code":""},{"path":"https://maialab.org/agvgd/reference/read_alignment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a protein sequence multiple alignment — read_alignment","text":"","code":"# Read in the alignment for the gene XRCC2 read_alignment('XRCC2') #> Hsap_XRCC2   1 MCSAFHRAESGTELLARLEGRSSLKEIEPNLFADEDS--PVHGDILEFHG #> Mmul_XRCC2   1 MCSDFHRAESGTELLARLEGRSSLKEIEPNLFADEDS--PVHGDILEFHG #> Mmus_XRCC2   1 MCSDFRRAESGTELLARLEGRSSLKELEPNLFADEDS--PVHGDIFEFHG #> Cfam_XRCC2   1 MCSDFHRAESGTELLARLEGRSSLKEIEPYLFTDEVS--SVHGDILEFHG #> Lafr_XRCC2   1 MCSDFHRAESGTELLARLEGRSSLKVIEPYLFADEES--PVHGDILEFHG #> Mdom_XRCC2   1 MSGDFRRAESGTELLARLEGRSSLKDIEPFLFADEGS--PIHGDILEFHG #> Oana_XRCC2   1 MSGHFRRAESGTELLARLEGRSSLKTLEPFLFADEGF--PIHGDILEFHG #> Ggal_XRCC2   1 MGDAFRRAESGTQLLARLEGRSSLKNLEPNLFAEEGS--PVHGDVIEFHG #> Acar_XRCC2   1 MTGRFGEAESGAQLLARLEGRGSLKDLEPCLFAEEGY--PIPGDIIECYG #> Xtro_XRCC2   1 MSDGSRQAESGTQLLARLEGRASLSNLEPLLFADEGC--PVHGEITEFYG #> Drer_XRCC2   1 MTARVRMAENGAQLVSRLEGRQSLKDIEPNIFPADGG--PGQGDVVEFHG #> Bflo_XRCC2   1 MXXXXXXXXXXXXLLARLGSRPSLVQLETALFRADMG--PKSGDAIELYG #> Spur_XRCC2   1 MXXXXXXXXXXXXLFARLGEKPSLARLNPKLIPPGLE--PRPGDVVEIYG #> Nvec_XRCC2   1 MXXXXXXXXXXXKLFSRLGSKQSLDGLDKKLFVDIPD-GIKAGDVVEFYG #> Tadh_XRCC2   1 M-----ASESAAKLFARLGSRQTVIGMEDRLFSKLQFNGLTCGDVVEFYG  #>  #> Hsap_XRCC2  51 PEGTGKTEMLYHLTARCILPKS-----EGGLEVEVLFIDTDYHFDMLRLV #> Mmul_XRCC2  51 SEGTGKTEMLYHLTARCILPKS-----EGGLEVEVLFIDTDYHFDMLRLV #> Mmus_XRCC2  51 PEGTGKTEMLYHLTARCILPKS-----EGGLQIEVLFIDTDYHFDMLRLV #> Cfam_XRCC2  51 PEGTGKTEMLYHLTARCILPKS-----EGGLEVEVLFIDTDYHFDMLRLV #> Lafr_XRCC2  51 PEGTGKTEMLYHLTARCILPKS-----EGGLEIEVLFIDTDHHFDMLRLV #> Mdom_XRCC2  51 PEGTGKTEMLYHLTARCILPKS-----EGGLEVEVLFIDTDYHFDMLRLV #> Oana_XRCC2  51 QEGTGKTEMLYHLVARCILPRS-----EGGLEEEVLFVDTDYHFDMLRLI #> Ggal_XRCC2  51 PEGTGKTEMLYHLIARCIIPKS-----GGGLEVEVMFIDTDYHFDMLRLV #> Acar_XRCC2  51 PEGTGKTEMFYHLIARCILPKS-----RGGLEVGLLFIDTDFHFDMLRLV #> Xtro_XRCC2  51 PEGTGKTEMLCHLISRCILPKS-----DGGLQVEVIYIDTDYHFDMLRLV #> Drer_XRCC2  51 MEGSGKTETLYHLITRCITPTH-----SGGLEVGVVFIDTDYHFDMLRFV #> Bflo_XRCC2  51 PEGTAKTEMLLHLTARCILPAS-----VGGLEAGVVFIDNDYHFDILRLV #> Spur_XRCC2  51 NSGSGKTELLLNLAAMCILPERWKTIDIGGLGTSVVFIDTDHQFSMLRLF #> Nvec_XRCC2  51 KEGCGKTEMLLHLAANCIMPRSWHELYLGGKGVSVIFIDTDYHFQILRLI #> Tadh_XRCC2  51 SEGCGKTEMLLHLMIKCIMPDNFRGIAMNGRSMSVVYIDCDYHFNLLRLM  #>  #> Hsap_XRCC2 101 TILEHRL------SQSS--------EEIIKYCLGRFFLVYCSSSTHLLLT #> Mmul_XRCC2 101 TVLEHRL------SQSS--------EEIIKYCLGRFFLVYCSSSTHLLLT #> Mmus_XRCC2 101 TVLEHRL------SQSS--------EEAMKLCLARLFLAYCSSSMQLLLT #> Cfam_XRCC2 101 TILEHRL------SQSS--------EEMVKHCLGRLFLVNCNSSTQLLLT #> Lafr_XRCC2 101 TILEHRL------SQSS--------EEIIKSCLGRFFLVYCSSSSQLLLT #> Mdom_XRCC2 101 TILERRL------SQST--------EDIIKHCLGRFFLVNCSSSNQLLIT #> Oana_XRCC2 101 TILEHRL------SQSS--------EEAIKLCLGRLFLVYCSSSVQLLLT #> Ggal_XRCC2 101 TILEHRL------EQST--------EEMMKRCLGRLFLVNCNSSTQLLLT #> Acar_XRCC2 101 TILEHRS------SQGT--------EDMIKQCLGRFFLVNCSSSSQLLLT #> Xtro_XRCC2 101 TILEHRL------AQNT--------EEAVKQCLGRFFLLYCNSSVQLLLT #> Drer_XRCC2 101 SILEGRL------AEDSKTGSENEAEETVRSCLCRLSVVHCNSSVQLLLT #> Bflo_XRCC2 101 TVLEGRL------DTTD--------EDRMKQCLGRLYIVRCNSSEQLVIT #> Spur_XRCC2 101 ALLERKV------AEAIDNRTKRK-ETFLKACLKKLYMVKIATSNQLVIT #> Nvec_XRCC2 101 AIMEYRT------AESE---------TLIKQCLTRLFIVRCNSSVELLAT #> Tadh_XRCC2 101 SILEQRYCKACQGSNATMVKHS---EEFIRKCLERFYIIRCDTIHQLITS  #>  #> Hsap_XRCC2 151 LYSLESMFCSHPSLCLLILDSLSAFYWIDRVNGGESVNLQESTLRKCSQC #> Mmul_XRCC2 151 LYSLESMFCSHPSLCLLILDSLSAFYWIDRVNGGESVNLQESTLRKCSQC #> Mmus_XRCC2 151 LHSLEALLCSRPSLCLLIVDSLSSFYWIDRVSGGESVALQESTLQKCSQL #> Cfam_XRCC2 151 LYSLETVVCSHPSLCLLILDSLSAFYWIDRVNGGESVNLQEATLKKCAQF #> Lafr_XRCC2 151 LYSLESMFCSHPSLCLLILDSLSAFYWIDRANGGESVNLQESTLKKCSQF #> Mdom_XRCC2 151 LYSLETMFCSHPSLCLFILDSLSAFYWIDRVNGGESLTLQEINLKKCSKF #> Oana_XRCC2 151 LHSLETMFCSRPSLSLLMVDSLSAFYWIDRANGGESLTQQEATLRKCTRL #> Ggal_XRCC2 151 LYSLENMFCTHPSLCLLILDSISAFYWIDRSNGGESLNSQEMNLKKCANF #> Acar_XRCC2 151 LYSLENMFCSHPSLCLLIIDSISAFYWIDRVNGGESISLQEANLRRCAQF #> Xtro_XRCC2 151 LYSLENMFCSHPSLCLLIIDSISAFYWIDRNNGGETFAKQETNLRKCTEL #> Drer_XRCC2 151 LHYLENTFSSQPTLGLLVIDSISAFYWTDRFNGGESASCQEANLRKCAEL #> Bflo_XRCC2 151 LHSLEHIIASSSEVALLIVDSISAFYWLDR-STDDSMSGQELNQRRCVDI #> Spur_XRCC2 151 LHSLESLLASQCDISVLMMDSVSAFYWVDRMKGDG-AHRQGVNQKLAFGA #> Nvec_XRCC2 151 LLSMEQLIICKPEICVMMIDSLSAFYWVDRSSGGESLQDQQENIRKTTSV #> Tadh_XRCC2 151 LHLLEYSISSNPDIGIMLIDGIGSFYWQDKFSSSS-----GVDQ--LCKI  #>  #> Hsap_XRCC2 201 LEKLVNDYRLVLFATTQTIMQKAS------------SSSEEPSHASRRLC #> Mmul_XRCC2 201 LEKLVNDYRLVLFATTQTIMQKAL------------NSSEEPSPASRRLR #> Mmus_XRCC2 201 LERLVTEYRLLLFATTQSLMQKGS------------DSADGPSSS-KHPC #> Cfam_XRCC2 201 LEKLVNEYRLVLFATTQSIMQKTS------------NWTEGPSSAFNHPK #> Lafr_XRCC2 201 LERLVNEYRLILFASTQSIMQKPS------------NSTEGPSSAFKQPS #> Mdom_XRCC2 201 LEKLVKEYHLVLFATTQTIMQKNS------------NSTERSSSL-KLPC #> Oana_XRCC2 201 LEKLVKEYHLVLLATTQAIMQRSS------------KASENSASA----W #> Ggal_XRCC2 201 LEKLVREHHLVLFATTQSIMQKST------------NSAEGF-FPLKLQS #> Acar_XRCC2 201 LEKLVREHHLVLFATTQAIMQKSL------------NAIE---SSRKRNS #> Xtro_XRCC2 201 LHKLLKEYQLVLFASTQAIMQKSP------------NEAGEGPSRSGKQN #> Drer_XRCC2 201 LDRLRRNYGIVIFATTHAIMRNFGSDLG--VS-DVHGSSSSSSSRRWRSA #> Bflo_XRCC2 201 LSRYLSDYGIVLIATKQALFGHKSRKNQ--NE-D-----TTLSPKLEKTK #> Spur_XRCC2 201 LSRLVEDYHLVLFASKAALVTKQPQN-EFSLRLDSTGETDHSNRTSTTSV #> Nvec_XRCC2 201 LSRFSRENHLVIFTTVHAIFG---NN----TK----------E--M---- #> Tadh_XRCC2 201 VKYLCDEHNLIVLATKSAIRKQFENSRL--AN-K----SRLRNDIASNYN  #>  #> Hsap_XRCC2 251 DVDIDY-RPYLCKAWQQLVKHRMFFSKQDDS----QS-SNQFSLVSRCLK #> Mmul_XRCC2 251 DVDVDY-RPYLCKAWQQLVKHRIFFSKQDDS----QS-SNQFSLVSRCLK #> Mmus_XRCC2 251 DGDMGY-RAYLCKAWQRVVKHRVIFSRDDEA----K--SSRFSLVSRHLK #> Cfam_XRCC2 251 EADADY-RPYLCKEWQQVVKHRIFFSKQEDF----K---TQFSLVSRHLK #> Lafr_XRCC2 251 NEDIDY-RPYLCKAWQQMVKHRIFFSKQDDS----KR-NNQFSLVSRHLK #> Mdom_XRCC2 251 EVDIDY-RPYLCKSWQQMVNHRIFFSRNSES----S---NQMSVVSYHLK #> Oana_XRCC2 251 EGDGDY-RPYLCKSWQQLVNHRLFFSKQDNG----EDPKQMFSFTSCHLK #> Ggal_XRCC2 251 EIDADY-RPYLCKSWQQMVTHRIFFSKQFNS----GN-STGFTLVSCHLK #> Acar_XRCC2 251 DGDVDY-RPYLCKSWQQMITHRIFFSKQCNP----DN-TQSFSITACHIR #> Xtro_XRCC2 251 SSSMDY-KPYLCKLWQQGATHRVLFSKELRN----N--EQIYSITSCHLK #> Drer_XRCC2 251 DCASDFDRPYLCRAWQRIVTHRVLFTKSHAP----KDHKQILSTACTSIL #> Bflo_XRCC2 251 VENVEH-YEYMCHAWQNLIKYRYVFSRATKKDISIEENGKDISSFSATMI #> Spur_XRCC2 251 KLSTDH-HEFMSQEWTKLVTHRMILERHDHMTS--DGPNSSYLSVLKHKA #> Nvec_XRCC2 251 ---MRN-QDYLCKAWQQSVKYRYMFTKQTEYDGKASQFCSVYV-VQRTSP #> Tadh_XRCC2 251 STHSKH-MEYMPNVWRKLVKYRYILSKLDSELSGANSYSATYS-VVLEHP  #>  #> Hsap_XRCC2 301 SNSLKKHFFIIGESGVEFC------- #> Mmul_XRCC2 301 SNSFKKHFFIIGESGVEFC------- #> Mmus_XRCC2 301 SNSLKKHSFMVRESGVEFC------- #> Cfam_XRCC2 301 SNSLKKHTFVIGENGIEFC------- #> Lafr_XRCC2 301 SNSLKKHFFIIGESGVEFC------- #> Mdom_XRCC2 301 SNNLIKRLFSIRESGVHFC------- #> Oana_XRCC2 301 SNRFAKRFFSIGEGGVQF-------- #> Ggal_XRCC2 301 KKHVAKRSFSIAECGVQFFQ------ #> Acar_XRCC2 301 NNSVIKRSFSILENGVQF-------- #> Xtro_XRCC2 301 TRNGVKRSFRIAESGVQFL------- #> Drer_XRCC2 301 TKGVKKCSFCVVEDGIKFICDK---- #> Bflo_XRCC2 301 KPVEHKCEFTVADRGISFMGSLYNQC #> Spur_XRCC2 301 SGNMYSCQFIIDQQGIRV-------- #> Nvec_XRCC2 301 KTESKSNRFLIEEHGVVFIS------ #> Tadh_XRCC2 301 SSIESAERFIVSEEGVVFI-------"},{"path":"https://maialab.org/agvgd/reference/read_substitutions.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a file with amino acid substitutions — read_substitutions","title":"Read a file with amino acid substitutions — read_substitutions","text":"function reads file amino acid substitutions. format one requested web version Align-GVGD.","code":""},{"path":"https://maialab.org/agvgd/reference/read_substitutions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a file with amino acid substitutions — read_substitutions","text":"","code":"read_substitutions(   file = stop(\"`file` must be specified\"),   amino_acid_code = c(\"one_letter\", \"three_letter\") )"},{"path":"https://maialab.org/agvgd/reference/read_substitutions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a file with amino acid substitutions — read_substitutions","text":"file path file amino acid substitutions. amino_acid_code type symbol used amino acids returned output.","code":""},{"path":"https://maialab.org/agvgd/reference/read_substitutions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a file with amino acid substitutions — read_substitutions","text":"tibble listing amino acids substitutions.","code":""},{"path":"https://maialab.org/agvgd/reference/read_substitutions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a file with amino acid substitutions — read_substitutions","text":"","code":"# \"sub.txt\" is an example file containing missense substitutions formatted # according # to the requirements indicated in http://agvgd.hci.utah.edu/help.php. my_file <- system.file(\"extdata\", \"sub.txt\", package = \"agvgd\") cat(readLines(my_file), sep = \"\\n\") #> P2S #> P2R #> P2L #> P2T #> P2A #> P2V #> P2G #> P2I #> P2F #> P2Y #> P2C #> P2H #> P2Q #> P2N #> P2K #> P2D #> P2E #> P2M #> P2W #>   read_substitutions(file = my_file) #> # A tibble: 19 × 3 #>      poi ref   sub   #>    <int> <chr> <chr> #>  1     2 P     S     #>  2     2 P     R     #>  3     2 P     L     #>  4     2 P     T     #>  5     2 P     A     #>  6     2 P     V     #>  7     2 P     G     #>  8     2 P     I     #>  9     2 P     F     #> 10     2 P     Y     #> 11     2 P     C     #> 12     2 P     H     #> 13     2 P     Q     #> 14     2 P     N     #> 15     2 P     K     #> 16     2 P     D     #> 17     2 P     E     #> 18     2 P     M     #> 19     2 P     W"},{"path":"https://maialab.org/agvgd/reference/res_to_poi.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a residue position to an alignment position — res_to_poi","title":"Convert a residue position to an alignment position — res_to_poi","text":"function converts residue position position frame alignment.","code":""},{"path":"https://maialab.org/agvgd/reference/res_to_poi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a residue position to an alignment position — res_to_poi","text":"","code":"res_to_poi(alignment, res)"},{"path":"https://maialab.org/agvgd/reference/res_to_poi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a residue position to an alignment position — res_to_poi","text":"alignment alignment. res residue position.","code":""},{"path":"https://maialab.org/agvgd/reference/res_to_poi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a residue position to an alignment position — res_to_poi","text":"integer vector alignment positions corresponding residue position reference   sequence.","code":""},{"path":"https://maialab.org/agvgd/reference/res_to_poi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a residue position to an alignment position — res_to_poi","text":"","code":"align_ATM <- read_alignment('ATM') align_ATM[, 1:5] #> Hsap_ATM_AAB65827.1  1 M-SLV #> Mmus_ATM_NP_031525.2 1 M-SLA #> Sscr_ATM_AAT01608.1  1 M-SLA #> Mdom_ATM_IARC        1 M-SLA #> Ggal_ATM_edited      1 M-SLV #> Xlae_ATM_AAT72929.1  1 M-SLA #> Drer_ATM_IARC_v2     1 M-SLA #> Bflo_ATM_IARC        1 MTDLL #> Spur_ATM_ABY60856.1  1 MAEVL  # Convert the positions of the first five residues to alignment positions res_to_poi(align_ATM, 1:5) #> [1] 1 3 4 5 6"},{"path":"https://maialab.org/agvgd/news/index.html","id":"agvgd-011","dir":"Changelog","previous_headings":"","what":"agvgd 0.1.1","title":"agvgd 0.1.1","text":"main function agvgd() alias, align_agvgd(), now removed avoid confusion. functions now exported allowing access low-level routines: gd(), gv() cpv_ranges(). alignment_pos_to_residue_pos() renamed poi_to_res() residue_pos_to_alignment_pos() res_to_poi(). Code coverage now tracked. Added NEWS.md file track changes package.","code":""},{"path":"https://maialab.org/agvgd/news/index.html","id":"agvgd-010","dir":"Changelog","previous_headings":"","what":"agvgd 0.1.0","title":"agvgd 0.1.0","text":"CRAN release: 2022-01-17 First version agvgd.","code":""}]
